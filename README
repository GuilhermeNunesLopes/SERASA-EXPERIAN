##########################################################
######### INICIO DAS INSTRUÇÕES DO TERRAFORM #############
##########################################################

#Para este teste utilizei alguns documentos como base:
https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs
https://learn.hashicorp.com/tutorials/terraform/azure-build?in=terraform/azure-get-started
https://www.terraform.io/docs/cli/commands/index.html
https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/data-sources/virtual_machine
https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/network_security_rule
https://docs.microsoft.com/pt-br/azure/virtual-machines/linux/cli-ps-findimage
https://docs.microsoft.com/pt-br/rest/api/compute/resource-skus/list
https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview
https://docs.microsoft.com/pt-br/cli/azure/install-azure-cli-windows?tabs=azure-cli
https://docs.microsoft.com/pt-br/cli/azure/vm?view=azure-cli-latest


#Pré-requisitos:

1 - Azure CLI - para logar na azure, assim não é necessario colocar a senha no código.(https://docs.microsoft.com/pt-br/cli/azure/install-azure-cli)
2 - Api do terraform instalado na máquina - para executar os comandos
3 - Git instalado - para puxar os arquivos do repositório para o diretório local

#(Se é a sua primeira vez executando )
#Como clonar o repositório do código e inserir o terraform no path do windows:
1 - Clone e repositório usando comando gh repo clone GuilhermeNunesLopes/SERASA-EXPERIAN
2 - Abra a api do terraform, e acesse o diretório onde foi baixado o repositório para rodar via cmd no caso do windows basta inserir o executável no caminho C:\Windows\System32, no linux basta executar os comandos abaixo

#(Se já executou alguma vez, ou já tem o que precisa)
#Se ja estiver com o código clonada na máquina local e com o terraform instalado realize os procedimentos abaixo, vale lembrar que é importante estar dentro da pasta Terraform_Code:
1 - Execute o comando 'az login' no, cmd ou no terminal que você havia baixado a API e logue com a sua conta da azure
2 - Execute o comando 'terraform init' para iniciar a Api do terraform
3 - Execute o comando 'terraform plan' para ler todo o arquivo main.tf
4 - Execute o comando 'terraform apply --auto-approve' para começar a criar a infra via terraform
5 - Valide se os componentes realmente subiram com o 'terraform state list'

#Como desprovisionar a infra
1 - Para desprovisionar é bem simples basta executar o comando 'terraform destroy'



#Para sabermos qual ip público foi setado para a nossa instância podemos utilizar o comando via az cli após logarmos na nossa conta azure:
'az network public-ip list | findstr ipAddress'

##########################################################
######### FIM DAS INSTRUÇÕES DO TERRAFORM_CODE ###########
##########################################################


##########################################################
######### INICIO DAS INSTRUÇÕES DO  ANSIBLE_CODE #########
##########################################################

#Documentação base:

https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html
https://docs.docker.com/config/containers/start-containers-automatically/
https://docs.ansible.com/ansible/latest/user_guide/windows_usage.html
https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html

#Pré-requisitos:
Ter acesso a uma máquina com o ansible instalado


#É necessario configurarmos o arquivo inventário/host do ansible com o ip publico da máquina que realizamos o deploy no passo a cima no terraform:
Estando dentro da máquina onde roda o ansible devemos entrar no diretório '/etc/ansible/hosts' - e inserir uma nova linha seguindo o exemplo, sendo que xxx.xxx.xxx é o ip da sua máquina da Azure
[app]
xxx.xxx.xxx.xxx


#Como utilizaremos o docker estou realizando a instalação via ansible.Segue abaixo um documento de apoio para instalar em uma VM CentOS:
https://docs.docker.com/engine/install/centos/

#Como executar o arquivo do playbook
1 - Copie todos os arquivos presente no /Ansible_&_Docker para a máquina que esta com o ansible instalado
2 - Acesse o caminho /etc/ansible/ansible.cfg e edite o arquivo descomentando a linha 'host_key_checking = False'
3 - Rode o comando 'ansible-playbook playbook.yml -k -K' no diretório /Ansible_&_Docker que você copiou . /
Lembrando que o primeiro -k é para a senha do usuário(presente no arquivo main.tf) que irá a acessar a máquina e o -K é /
para a senha do user root(mesma senha do arquivo main.tf), /
coloque as senhas na ordem correta para não gerar problemas na execução.
4 - Acompanhe a execução pelos logs




############################################
EXPLICANDO CADA UMA DAS PASTAS E ARQUIVOS  #
############################################
Pasta 'Ansible_&_Docker' - nesta pasta temos os arquivos abaixo =
playbook.yml - arquivo que o ansible irá rodar para logar na maquina na azure, instalar o docker, subir o container e rodar a aplicação
Dockerfile - como o proprio nome ja diz é o arquivo Docker que esta configurado a imagem do container e a execução do comando para buildar o código da api Go
main.go - é o arquivo da aplicação .Go que iremos fazer o deploy 

Pasta 'Terraform_Code' - nesta pasta temos apenas um arquivo importante=
main.tf - é o arquivo com a extensão do terraform que tem o papel mais importante, sendo o grande responsável por subir toda a estrutura na azure que possibilita fazer o deploy da aplicação.


